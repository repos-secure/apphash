#!/usr/bin/env python
import os, shutil, subprocess
import cubictemp

def walkTree(path, exclude=()):
    for root, dirs, files in os.walk(path):
        for f in files:
            relpath = os.path.join(root[len(path)+1:], f)
            for patt in exclude:
                if fnmatch.fnmatch(relpath, patt):
                    break
            else:
               yield relpath


config = dict()


templates = set([
    "chrome.manifest",
])


def main():
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(
                usage = "%prog [options] src dest",
                version="%prog 0.1",
            )
    parser.add_option(
        "-b", "--bin", action="store_true",
        dest="bin", default=False,
        help = "Installation binary."
    )
    options, args = parser.parse_args()
    if len(args) != 2:
        parser.error("Please specify source and destination.")
    config["bin"] = options.bin

    for i in walkTree(args[0]):
        src = os.path.join(args[0], i)
        d, _ = os.path.split(i)
        dstdir = os.path.join(args[1], d)
        dst = os.path.join(args[1], i)
        try:
            os.makedirs(dstdir)
        except OSError:
            pass
        if i in templates:
            temp = cubictemp.File(src, **config)
            df = file(dst, "w")
            df.write(str(temp))
            df.close()
        else:
            shutil.copy(src, dst)

    if options.bin:
        #src = os.path.join(args[1], "chrome")
        #pwd = os.getcwd()
        #os.chdir(src)
        #subprocess.call(["zip", "-q", "-r", "apphash.jar", "."])
        #os.chdir(pwd)
        xpipath = os.path.abspath(args[1]+".xpi")
        os.chdir(args[1])
        subprocess.call(["zip", "-q", "-r", xpipath, "."])


main()
